{%- comment -%}
  Cart notification snippet
  Usage:
    {% render 'cart-notification', color_scheme: section.settings.color_scheme %}

  Parameters:
    - color_scheme: Optional. The color scheme to use for the notification.
{%- endcomment -%}

{%- if cart != empty -%}
  <div id="cart-notification" class="cart-notification focus-inset color-{{ color_scheme }}" aria-modal="true" aria-label="{{ 'sections.cart.cart' | t }}" role="dialog" tabindex="-1">
    <div class="cart-notification__header">
      <h2 class="cart-notification__heading caption-large">{{ 'sections.cart.items_in_cart' | t }}</h2>
      <button type="button" class="cart-notification__close" aria-label="{{ 'accessibility.close' | t }}" data-cart-notification-close>
        {% render 'icon-close' %}
      </button>
    </div>

    <div class="cart-notification__content" role="list">
      {%- for item in cart.items -%}
        <div class="cart-notification-product" role="listitem">
          <div class="cart-notification-product__image-container">
            {%- if item.image -%}
              <img class="cart-notification-product__image"
                srcset="{{ item.image | image_url: width: 140 }} 1x, {{ item.image | image_url: width: 280 }} 2x"
                src="{{ item.image | image_url: width: 140 }}"
                alt="{{ item.image.alt | escape }}"
                width="70"
                height="{{ 70 | divided_by: item.image.aspect_ratio | ceil }}"
                loading="lazy"
              >
            {%- endif -%}
          </div>
          <div class="cart-notification-product__info">
            <h3 class="cart-notification-product__name h4">{{ item.product.title | escape }}</h3>
            {%- if item.product.has_only_default_variant == false or item.selling_plan_allocation != nil -%}
              <dl>
                {%- if item.product.has_only_default_variant == false -%}
                  {%- for option in item.options_with_values -%}
                    <div class="product-option">
                      <dt>{{ option.name }}: </dt>
                      <dd>{{ option.value }}</dd>
                    </div>
                  {%- endfor -%}
                {%- endif -%}
                {%- if item.selling_plan_allocation != nil -%}
                  <div class="product-option">
                    <dt>{{ 'products.product.delivery' | t }}: </dt>
                    <dd>{{ item.selling_plan_allocation.selling_plan.name }}</dd>
                  </div>
                {%- endif -%}
              </dl>
            {%- endif -%}
          </div>
        </div>
      {%- endfor -%}
    </div>

    <div class="cart-notification__links">
      <a href="{{ routes.cart_url }}" class="button button--secondary button--full-width">
        {{ 'sections.cart.view_cart' | t }}
      </a>
      <form action="{{ routes.cart_url }}" method="post" id="cart-notification-form">
        <button class="button button--primary button--full-width" name="checkout">{{ 'sections.cart.checkout' | t }}</button>
      </form>
      <button type="button" class="link button-label" onclick="this.closest('dialog').close()">
        {{ 'general.continue_shopping' | t }}
      </button>
    </div>
  </div>
{%- endif -%}

<style>
  .cart-notification {
    position: fixed;
    top: var(--header-bottom-position, 100px);
    right: 0;
    z-index: 99;
    background: rgb(var(--color-background));
    padding: 2rem;
    box-shadow: 0 0 10px rgba(var(--color-foreground), 0.2);
    border-radius: var(--border-radius);
    transform: translateX(100%);
    visibility: hidden;
    opacity: 0;
    transition: transform var(--duration-default) ease,
                visibility 0s linear var(--duration-default),
                opacity var(--duration-default) ease;
  }

  .cart-notification.animate {
    transform: translateX(0);
    visibility: visible;
    opacity: 1;
    transition: transform var(--duration-default) ease,
                visibility 0s,
                opacity var(--duration-default) ease;
  }

  @media screen and (max-width: 749px) {
    .cart-notification {
      width: 100%;
      padding: 1.5rem;
    }
  }

  .cart-notification__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .cart-notification__heading {
    margin: 0;
    color: rgb(var(--color-foreground));
  }

  .cart-notification__close {
    color: rgba(var(--color-foreground), 0.75);
    background: transparent;
    border: none;
    padding: 0;
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cart-notification__close:hover {
    color: rgb(var(--color-foreground));
  }

  .cart-notification-product {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .cart-notification-product__image-container {
    width: 7rem;
    height: 7rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cart-notification-product__image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }

  .cart-notification-product__info {
    display: flex;
    flex-direction: column;
  }

  .cart-notification-product__name {
    margin: 0 0 0.5rem;
    color: rgb(var(--color-foreground));
  }

  .product-option {
    display: flex;
    gap: 0.5rem;
    font-size: 1.2rem;
    color: rgba(var(--color-foreground), 0.75);
  }

  .cart-notification__links {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: 2rem;
  }

  @media (prefers-reduced-motion: reduce) {
    .cart-notification {
      transition: none;
    }
  }
</style>

<script>
  class CartNotification extends HTMLElement {
    constructor() {
      super();
      this.notification = this;
      this.closeButton = this.querySelector('button[data-cart-notification-close]');
      this.onBodyClick = this.handleBodyClick.bind(this);
      
      this.closeButton.addEventListener('click', () => {
        this.close();
      });
    }

    open() {
      this.notification.classList.add('animate');
      this.notification.addEventListener('keyup', (evt) => evt.code === 'Escape' && this.close());
      document.body.addEventListener('click', this.onBodyClick);
    }

    close() {
      this.notification.classList.remove('animate');
      document.body.removeEventListener('click', this.onBodyClick);
    }

    handleBodyClick(evt) {
      const target = evt.target;
      if (!this.contains(target)) this.close();
    }
  }

  customElements.define('cart-notification', CartNotification);
</script> 